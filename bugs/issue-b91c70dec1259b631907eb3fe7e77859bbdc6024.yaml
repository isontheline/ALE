--- !ditz.rubyforge.org,2008-03-06/issue 
title: Select or recommend how to select -march and -mtune for GCC
desc: |-
  GCC supports a variety of -march and -mtune options (see `info gcc`); it might be
  worthwhile to test these on relevant platforms and perhaps either set reasonable
  defaults or recommend such for users, if typical GCC defaults are not adequate.
type: :task
component: ale
release: 
reporter: David Hilvert <dhilvert@auricle.dyndns.org>
status: :unstarted
disposition: 
creation_time: 2009-10-29 00:16:24.548702 Z
references: []

id: b91c70dec1259b631907eb3fe7e77859bbdc6024
log_events: 
- - 2009-10-29 00:20:54.590697 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - created
  - |-
    Perhaps most notable are -march=native and -mtune=native, which are said to
    select something reasonably optimal for the machine on which the compiler is
    being run.  From GCC documentation, the options appear support a rather broad
    range of x86 subtypes and instruction set features, so the native options 
    might be a good start.
    
    Other notable options would include `-mfpmath=see and -mfpmath=sse,387 .
- - 2009-10-29 00:28:45.350517 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    Note that use of SSE or so was brought up on either mailing list or e-mail some
    time ago, so it would probably be appropriate to look through the archives for
    a reference when publishing results (if any) to the mailing list (if I recall,
    no tests were mentioned, however).  Variation between 32- and 64-bit might also
    be worth looking at, as this has also been a topic of discussion on the list,
    and as the register architecture has changed for the larger, if I recall
    correctly (see Wikipedia for SSE, etc.; see also recent Libale bugs discussing
    acceleration issues).
- - 2009-10-29 00:49:28.992087 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    Gregory Maxwell had pointed out in 2004 that object abstraction in ALE may be
    preventing auto vectorization (SSE).  This seems a possibility, and might be a
    motivation for removing such abstraction (which might also make other sorts of
    acceleration -- such as via OpenCL -- easier).  He also notes that single
    precision is better optimized than double by GCC (but single is the default
    configuration).
    
    Jeff Epler had noted in 2003 that the then default flags (with -Os) produced
    better performance on Athlon XP 2600+ than specifying -march -mcpu -sse and
    -mfpmath flags in addition to -Os, or specifying -O2; I'd replied that this
    might be due to -Os keeping code in cache.  It's possible that the ordering of
    best options would have changed since then, in any case.
- - 2009-10-29 03:24:39.158184 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    One refinement of abstraction removal might be removal in the common case
    (e.g., for box and triangle filters).  See related bug ({issue 8ffa5cdb90b3f4ec2d4989f324f198d6fd550e37} ?) for proposed
    separation of these cases for acceleration via OpenCL.
- - 2009-10-29 10:51:54.850222 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    Building ale-bin-default and ale-bin-native from default configuration on
    Ubuntu 9.04 having GCC 4.3.3 as default g++ and -march=native -mtune=native,
    respectively, outputs for a 2-image set differ.  Timing with --ui=quiet gives
    -default (real, user, sys) (0m33.688s, 0m42.511s, 0m2.008s), -native
    (1m15.553s, 1m40.850s, 0m3.652s).
    
    Adding -fpmath=sse to -march=native and -mtune=native gives (1m11.414s,
    1m32.074s, 0m3.756s).
    
    -march=native on its own gives (1m15.165s, 1m37.418s, 0m3.600s).
    
    -mtune=native on its own gives (1m17.348s, 1m39.794s, 0m3.368s).
    
    -mfpmath=sse on its own gives (1m13.957s, 1m38.122s, 0m3.700s).
    
    Running through valgrind's cache profiler might be of interest; e.g., comparing
    instruction cache statistics might indicate whether code size is a significant
    issue.  Something else to look at would be interactions with threading (do
    times get worse for the -m flags in the single-threaded case?).
    
    With --threads 1, -default configuration above gives (0m50.411s, 0m47.683s, 0m0.588s);
    -native gives (1m56.281s, 1m51.835s, 0m0.684s).
    
    $ cat /proc/cpuinfo 
    processor	: 0
    vendor_id	: GenuineIntel
    cpu family	: 6
    model		: 15
    model name	: Intel(R) Core(TM)2 Duo CPU     L7500  @ 1.60GHz
    stepping	: 10
    cpu MHz		: 800.000
    cache size	: 4096 KB
    physical id	: 0
    siblings	: 2
    core id		: 0
    cpu cores	: 2
    apicid		: 0
    initial apicid	: 0
    fdiv_bug	: no
    hlt_bug		: no
    f00f_bug	: no
    coma_bug	: no
    fpu		: yes
    fpu_exception	: yes
    cpuid level	: 10
    wp		: yes
    flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe nx lm constant_tsc arch_perfmon pebs bts pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm lahf_lm ida tpr_shadow vnmi flexpriority
    bogomips	: 3192.18
    clflush size	: 64
    power management:
    
    processor	: 1
    vendor_id	: GenuineIntel
    cpu family	: 6
    model		: 15
    model name	: Intel(R) Core(TM)2 Duo CPU     L7500  @ 1.60GHz
    stepping	: 10
    cpu MHz		: 800.000
    cache size	: 4096 KB
    physical id	: 0
    siblings	: 2
    core id		: 1
    cpu cores	: 2
    apicid		: 1
    initial apicid	: 1
    fdiv_bug	: no
    hlt_bug		: no
    f00f_bug	: no
    coma_bug	: no
    fpu		: yes
    fpu_exception	: yes
    cpuid level	: 10
    wp		: yes
    flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe nx lm constant_tsc arch_perfmon pebs bts pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm lahf_lm ida tpr_shadow vnmi flexpriority
    bogomips	: 3192.15
    clflush size	: 64
    power management:
    
    ----
    
    (X61 Tablet).  (Note that frequency uses 'Ondemand' policy, so that frequency varies.)
git_branch: 
