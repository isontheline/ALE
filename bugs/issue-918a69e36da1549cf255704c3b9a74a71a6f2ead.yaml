--- !ditz.rubyforge.org,2008-03-06/issue 
title: Consider adding bayer pattern auto-detection (e.g., by checking whether extrema tend to occur on particular grids).
desc: ""
type: :task
component: ale
release: 
reporter: David Hilvert <dhilvert@auricle.dyndns.org>
status: :unstarted
disposition: 
creation_time: 2009-04-01 17:33:53.774829 Z
references: []

id: 918a69e36da1549cf255704c3b9a74a71a6f2ead
log_events: 
- - 2009-04-01 17:33:54.360437 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - created
  - ""
- - 2009-04-01 17:35:43.092157 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - edited title
  - ""
- - 2009-04-01 17:39:46.363601 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    For status output of (e.g., --bayer auto), consider:
    
     '002.png (RGB )'*** okay (84.073183% match).
     '003.png (rgbg)'*** okay (90.266200% match).
     '004.png (gbgr)'*** okay (78.123316% match).
- - 2009-04-01 17:46:49.842335 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    Consider that, for detecting grayscale uninterpolated bayer patterns (e.g.,
    those produced by dcraw -d/-D), it could be worthwhile to check for apparent
    similarity within planes of candidate bayer patterns, when compared against
    similarity in the grayscale image generally.  Such checks would, assumedly, be
    performed solely on images found to be grayscale (e.g., images having all
    channels equal for each pixel, if no other indicator of grayness is available).
    
    For distinguishing R/B, the commonest type for the given orientation might be
    chosen if no other marker is available (e.g., RGBG in the upright horizontal
    orientation is probably more common than BGRG).
- - 2009-04-01 17:47:49.629116 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    Note further that autodetection might be overridden by detected values from
    the script (e.g., based on a database within the script, or based on output
    from a program such as dcraw, should relevant output be available).
- - 2009-04-03 14:10:05.538913 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    Note that, perhaps especially in the case of a GUI, a step might be added to
    inquire whether a rendering looks OK, or whether red and blue values should be
    swapped, and that, in the case that they should be swapped, a request might
    be made that the user submits camera info (e.g., via EXIF) for updating the
    bayer pattern database, perhaps along with certain program output (e.g., for
    determining the assumed pattern, as well as the correct pattern).
- - 2009-04-03 14:23:11.454480 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    Consider that, for requesting user input regarding patterns, rather than
    requesting any information at the end of a run, a question might be asked at
    the beginning (perhaps in conjunction with an image viewer such as display),
    and, furthermore, that such questions should probably be limited to the case
    where a grayscale bayer is provided as original input.  (In particular, the
    case of color input and the case of raws processed by dcraw should be possible
    to address in the typical case with no user input [e.g., as dcraw can be called
    twice, once generating a color result].  For this case, however, a request
    could still be made that a report be submitted regarding the hardware, so that
    an addition could be made to the hardware database.
- - 2009-04-04 18:56:15.772655 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    Consider that a reasonable first implementation might be to add recognition for
    color inputs, either PPM or those read by ImageMagick (as this is probably the case
    most commonly seen, and also the case most in need of recognition).
- - 2009-04-04 19:27:00.179279 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    Consider that a reasonable definition of a preferred Bayer pattern might be one
    that explains (e.g., via a particular sort of interpolation, such as triangle)
    the input better than any other Bayer pattern, perhaps by some margin.  An
    additional constraint (e.g., such as those previously considered) might be used
    to determine whether a Bayer pattern is preferred over no Bayer pattern.
git_branch: 
