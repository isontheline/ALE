--- !ditz.rubyforge.org,2008-03-06/issue 
title: Implement OpenCL acceleration for common cases, as outlined in Libale bug database.
desc: |-
  Common cases should be possible to accelerate in a fairly straightforward way (e.g., by
  checking pointer-based structures against some set of common instances (e.g., box
  and triangle filters, which are used by default, out of the complete [infinite] set
  of possible filters)).
type: :task
component: ale
release: 
reporter: David Hilvert <dhilvert@auricle.dyndns.org>
status: :unstarted
disposition: 
creation_time: 2009-10-27 22:59:11.277911 Z
references: []

id: 0bf611da78693eae8577a617b3c6cebd4e57568f
log_events: 
- - 2009-10-27 22:59:13.373775 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - created
  - ""
- - 2009-10-27 23:00:26.209500 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    This might be perhaps be most appropriate for the 0.9 branch separate from current
    master, or perhaps on its own branch, to allow for separate development of development
    for Libale, perhaps with cherry-picking of changes between branches or so.
- - 2009-10-28 03:21:43.117033 Z
  - David Hilvert <dhilvert@auricle.dyndns.org>
  - commented
  - |-
    One approach to this might be to implement acceleration for an early version
    (for which implementation would be easier; in the limiting case, 0.0.0 should
    be fairly straightforward), and then migrate the relevant patches for
    acceleration to later versions (in the limiting case, version by version, with
    a new branch at every version, or, perhaps easier, on a separate acceleration
    branch anchored at the point of the initial implementation), hence
    accomplishing a piecewise (or incremental) refactoring while allowing testing
    of the resulting code at every stage (and, more significantly, allowing early
    testing).
git_branch: 
