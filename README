ALE is the Anti-Lamenessing Engine

This is a program designed to produce relatively alias-free images from digital
camera samples.  Much of it could be applied to images from any source, as long
as they are in PPM binary format.  

Other image formats can optionally be supported by ImageMagick.  See the
section 'Compiling from source' below for more information on compiling with
ImageMagick support.


Downloading a binary
--------------------

	Windows
	-------

	Download ale-x_x_x-win32.zip, unzip, and execute ale.exe.  Note that 
	ALE takes arguments on the command line, so you may need to open a 
	command prompt window to use ALE successfully.  Typing 'ale.exe' with 
	no arguments will print a usage message.  

	This build does not use ImageMagick for handling files, so only PPM
	binary format is currently supported.  If you want support for files
	other than PPM, try compiling from source; otherwise, convert the input
	files to PPM if necessary (e.g. with ImageMagick's command-line
	utilities).

	
	Other Platforms
	---------------

	No binaries provided.  Compile from source.


Compiling from source (version 0.3.x)
-------------------------------------

You will need GCC and a make utility (GNU Make will do fine).  To compile from
source, download the tarball into a directory, expand it with 'tar xzf
ale-x.x.x.tar.gz', enter the unzipped directory, and type either 'make' or
'make IMAGEMAGICK=1', depending on whether ImageMagick support is desired.  The
makefile may need some tweaking on Windows systems (e.g. you may want to write
the output to 'ale.exe' or something.


Using ALE (version 0.3.x)
-------------------------

Usage: ale [<options>] <input-files> ... <output-file>
   or: ale --version

This program clips several supplemental frames against an original frame and
merges the results into a single output file result.  The first input file is
considered the original frame, and subsequent input files are considered
supplemental frames.  Unless ALE has been compiled with the ImageMagick option,
all files must be in PPM binary (as opposed to ascii) format.  The merge is
produced incrementally, and you can inspect the output file as the process
progresses.  Options are described in the next section.


Options (version 0.3.2)
-----------------------

Scaling options:

--scale2          Scale input images up by 2
--scale4          Scale input images up by 4
--scale8          Scale input images up by 8
--hf-enhance=n    Post-enhance high freq. details by factor n. (0.0 is default)



Alignment channel options:

--align-all       Align images using all color channels
--align-green     Align images using the green channel
--align-sum       Align images using a sum of channels [default]


Transformation options:

--translation     Only adjust the position of images
--euclidean       Adjust the position and orientation of images [default]
--projective      Use projective transformations.  Best quality, but slow.


Transformation file operations:

--trans-load=x    Load initial transformation settings from file x
--trans-save=x    Save final transformation data in file x


Tunable parameters:

--metric=x        Set the error metric exponent (2 is default)
--threshold=x     Min. match threshold; a perfect match is 100.  (0 is default)
--perturb-upper=x Max. correction step, in pixels or degrees (32.0 is default)
--perturb-lower=x Min. correction step, in pixels or degrees (.125 is default)


If a scaling argument is given, the program will internally scale all input
frames up by 2, 4, or 8, respectively, resulting in an output file of this
larger scale.  

As of version 0.3.1, ALE supports a high-frequency post-enhancement argument
that is applied to internally scaled images.  Enhancement occurs on the final
output of the alignment and merging algorithms after all inputs have been
processed.  By default, no enhacement occurs.  This is a fairly experimental
feature designed to enhance fine details.

As of version 0.2.0, ALE supports general projective transformations.  This is
the 'correct' type of transformation to use with images obtained from digital
cameras.  However, the default behavior is to only use euclidean
transformations (i.e. rotation and translation).  This is the same default
behavior used in ALE 0.1.x.  To use general projective transformations, specify
the option '--projective'.  Note that alignment can take a fairly long time
when this option is used.

The error metric for pixel components a and b is (abs(a-b)^x), where x is the
error metric exponent.  Larger exponents will cause the alignment process to be
more influenced by smaller image details.  

If a supplemental frame does not meet the minimum match threshold, it will be
discarded, and will not contribute to the final output (in this case, the
program will display the message 'no match').  Match values should be in the
interval [0,100].

As of version 0.3.0, it is possible to load and save transformation data.  Note
that projective transformation data will be ignored when performing euclidean
alignment.  On the other hand, euclidean transformation data can be used to set
the initial values for projective alignment.  When loading transformation data,
it may also be useful to reduce the perturbation upper bound.  

No correction step smaller than perturb-lower will be made in aligning images,
and no correction step larger than the perturb-upper will be made in aligning
images.  Note that correction steps larger than 2 are performed on images with
a reduced level of detail and that all correction step sizes are some power of
two.  If the interval [perturb-lower, perturb-upper] does not contain a power of
two, no correction will be performed.


Contact
-------

David Hilvert <dhilvert@ugcs.caltech.edu>
